{"remainingRequest":"/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/node_modules/babel-loader/lib/index.js!/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/node_modules/eslint-loader/index.js??ref--13-0!/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/src/permission.js","dependencies":[{"path":"/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/src/permission.js","mtime":1638155825172},{"path":"/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/node_modules/cache-loader/dist/cjs.js","mtime":1638151645198},{"path":"/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/node_modules/babel-loader/lib/index.js","mtime":1638151644619},{"path":"/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/node_modules/eslint-loader/index.js","mtime":1638151648368}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qdXN0Zm9yc3Rhci9EZXNrdG9wL1NvY2lhbE5ldHdvcmtQb3J0cmFpdEFuYWx5c2lzU3lzdGVtL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgcm91dGVyIGZyb20gJy4vcm91dGVyJzsKaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnOwppbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC11aSc7CmltcG9ydCBOUHJvZ3Jlc3MgZnJvbSAnbnByb2dyZXNzJzsgLy8gcHJvZ3Jlc3MgYmFyCgppbXBvcnQgJ25wcm9ncmVzcy9ucHJvZ3Jlc3MuY3NzJzsgLy8gcHJvZ3Jlc3MgYmFyIHN0eWxlCgppbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gJ0AvdXRpbHMvYXV0aCc7IC8vIGdldCB0b2tlbiBmcm9tIGNvb2tpZQoKaW1wb3J0IGdldFBhZ2VUaXRsZSBmcm9tICdAL3V0aWxzL2dldC1wYWdlLXRpdGxlJzsKTlByb2dyZXNzLmNvbmZpZ3VyZSh7CiAgc2hvd1NwaW5uZXI6IGZhbHNlCn0pOyAvLyBOUHJvZ3Jlc3MgQ29uZmlndXJhdGlvbgoKdmFyIHdoaXRlTGlzdCA9IFsnL2xvZ2luJywgJy9hdXRoLXJlZGlyZWN0J107IC8vIG5vIHJlZGlyZWN0IHdoaXRlbGlzdAoKcm91dGVyLmJlZm9yZUVhY2goIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodG8sIGZyb20sIG5leHQpIHsKICAgIHZhciBoYXNUb2tlbiwgcm9sZSwgYWNjZXNzUm91dGVzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAvLyBzdGFydCBwcm9ncmVzcyBiYXIKICAgICAgICAgICAgTlByb2dyZXNzLnN0YXJ0KCk7IC8vIHNldCBwYWdlIHRpdGxlCgogICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGdldFBhZ2VUaXRsZSh0by5tZXRhLnRpdGxlKTsgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGxvZ2dlZCBpbgogICAgICAgICAgICAvLyBjb25zdCBoYXNUb2tlbiA9IGdldFRva2VuKCkKICAgICAgICAgICAgLy8gaWYgKGhhc1Rva2VuKSB7CiAgICAgICAgICAgIC8vICAgaWYgKHRvLnBhdGggPT09ICcvbG9naW4nKSB7CiAgICAgICAgICAgIC8vICAgICAvLyBpZiBpcyBsb2dnZWQgaW4sIHJlZGlyZWN0IHRvIHRoZSBob21lIHBhZ2UKICAgICAgICAgICAgLy8gICAgIG5leHQoeyBwYXRoOiAnLycgfSkKICAgICAgICAgICAgLy8gICAgIE5Qcm9ncmVzcy5kb25lKCkKICAgICAgICAgICAgLy8gICB9IGVsc2UgewogICAgICAgICAgICAvLyAgICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHVzZXIgaGFzIG9idGFpbmVkIGhpcyBwZXJtaXNzaW9uIHJvbGVzIHRocm91Z2ggZ2V0SW5mbwogICAgICAgICAgICAvLyAgICAgY29uc3QgaGFzUm9sZXMgPSBzdG9yZS5nZXR0ZXJzLnJvbGVzICYmIHN0b3JlLmdldHRlcnMucm9sZXMubGVuZ3RoID4gMAogICAgICAgICAgICAvLyAgICAgaWYgKGhhc1JvbGVzKSB7CiAgICAgICAgICAgIC8vICAgICAgIG5leHQoKQogICAgICAgICAgICAvLyAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gICAgICAgdHJ5IHsKICAgICAgICAgICAgLy8gICAgICAgICAvLyBnZXQgdXNlciBpbmZvCiAgICAgICAgICAgIC8vICAgICAgICAgLy8gbm90ZTogcm9sZXMgbXVzdCBiZSBhIG9iamVjdCBhcnJheSEgc3VjaCBhczogWydhZG1pbiddIG9yICxbJ2RldmVsb3BlcicsJ2VkaXRvciddCiAgICAgICAgICAgIC8vICAgICAgICAgY29uc3QgeyByb2xlcyB9ID0gYXdhaXQgc3RvcmUuZGlzcGF0Y2goJ3VzZXIvZ2V0SW5mbycpCiAgICAgICAgICAgIC8vICAgICAgICAgLy8gZ2VuZXJhdGUgYWNjZXNzaWJsZSByb3V0ZXMgbWFwIGJhc2VkIG9uIHJvbGVzCiAgICAgICAgICAgIC8vICAgICAgICAgY29uc3QgYWNjZXNzUm91dGVzID0gYXdhaXQgc3RvcmUuZGlzcGF0Y2goJ3Blcm1pc3Npb24vZ2VuZXJhdGVSb3V0ZXMnLCByb2xlcykKICAgICAgICAgICAgLy8gICAgICAgICAvLyBkeW5hbWljYWxseSBhZGQgYWNjZXNzaWJsZSByb3V0ZXMKICAgICAgICAgICAgLy8gICAgICAgICByb3V0ZXIuYWRkUm91dGVzKGFjY2Vzc1JvdXRlcykKICAgICAgICAgICAgLy8gICAgICAgICAvLyBoYWNrIG1ldGhvZCB0byBlbnN1cmUgdGhhdCBhZGRSb3V0ZXMgaXMgY29tcGxldGUKICAgICAgICAgICAgLy8gICAgICAgICAvLyBzZXQgdGhlIHJlcGxhY2U6IHRydWUsIHNvIHRoZSBuYXZpZ2F0aW9uIHdpbGwgbm90IGxlYXZlIGEgaGlzdG9yeSByZWNvcmQKICAgICAgICAgICAgLy8gICAgICAgICBuZXh0KHsgLi4udG8sIHJlcGxhY2U6IHRydWUgfSkKICAgICAgICAgICAgLy8gICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgLy8gICAgICAgICAvLyByZW1vdmUgdG9rZW4gYW5kIGdvIHRvIGxvZ2luIHBhZ2UgdG8gcmUtbG9naW4KICAgICAgICAgICAgLy8gICAgICAgICBhd2FpdCBzdG9yZS5kaXNwYXRjaCgndXNlci9yZXNldFRva2VuJykKICAgICAgICAgICAgLy8gICAgICAgICBNZXNzYWdlLmVycm9yKGVycm9yIHx8ICdIYXMgRXJyb3InKQogICAgICAgICAgICAvLyAgICAgICAgIG5leHQoYC9sb2dpbj9yZWRpcmVjdD0ke3RvLnBhdGh9YCkKICAgICAgICAgICAgLy8gICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpCiAgICAgICAgICAgIC8vICAgICAgIH0KICAgICAgICAgICAgLy8gICAgIH0KICAgICAgICAgICAgLy8gICB9CiAgICAgICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgICAgIC8vICAgLyogaGFzIG5vIHRva2VuKi8KICAgICAgICAgICAgLy8gICBpZiAod2hpdGVMaXN0LmluZGV4T2YodG8ucGF0aCkgIT09IC0xKSB7CiAgICAgICAgICAgIC8vICAgICAvLyBpbiB0aGUgZnJlZSBsb2dpbiB3aGl0ZWxpc3QsIGdvIGRpcmVjdGx5CiAgICAgICAgICAgIC8vICAgICBuZXh0KCkKICAgICAgICAgICAgLy8gICB9IGVsc2UgewogICAgICAgICAgICAvLyAgICAgLy8gb3RoZXIgcGFnZXMgdGhhdCBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyBhcmUgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZS4KICAgICAgICAgICAgLy8gICAgIG5leHQoYC9sb2dpbj9yZWRpcmVjdD0ke3RvLnBhdGh9YCkKICAgICAgICAgICAgLy8gICAgIE5Qcm9ncmVzcy5kb25lKCkKICAgICAgICAgICAgLy8gICB9CiAgICAgICAgICAgIC8vIH0KCiAgICAgICAgICAgIGhhc1Rva2VuID0gJ2FkbWluLXRva2VuJzsKICAgICAgICAgICAgcm9sZSA9ICdhZG1pbic7CgogICAgICAgICAgICBpZiAoIWhhc1Rva2VuKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goJ3Blcm1pc3Npb24vZ2VuZXJhdGVSb3V0ZXMnLCByb2xlKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGFjY2Vzc1JvdXRlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIC8vIGR5bmFtaWNhbGx5IGFkZCBhY2Nlc3NpYmxlIHJvdXRlcwogICAgICAgICAgICByb3V0ZXIuYWRkUm91dGVzKGFjY2Vzc1JvdXRlcyk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MiwgX3gzKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKSk7CnJvdXRlci5hZnRlckVhY2goZnVuY3Rpb24gKCkgewogIC8vIGZpbmlzaCBwcm9ncmVzcyBiYXIKICBOUHJvZ3Jlc3MuZG9uZSgpOwp9KTs="},{"version":3,"sources":["/Users/justforstar/Desktop/SocialNetworkPortraitAnalysisSystem/src/permission.js"],"names":["router","store","Message","NProgress","getToken","getPageTitle","configure","showSpinner","whiteList","beforeEach","to","from","next","start","document","title","meta","hasToken","role","dispatch","accessRoutes","addRoutes","afterEach","done"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAAkC;;AAClC,OAAO,yBAAP,C,CAAiC;;AACjC,SAASC,QAAT,QAAyB,cAAzB,C,CAAwC;;AACxC,OAAOC,YAAP,MAAyB,wBAAzB;AAEAF,SAAS,CAACG,SAAV,CAAoB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAApB,E,CAA4C;;AAE5C,IAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,gBAAX,CAAlB,C,CAA+C;;AAE/CR,MAAM,CAACS,UAAP;AAAA,qEAAkB,iBAAOC,EAAP,EAAWC,IAAX,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACAT,YAAAA,SAAS,CAACU,KAAV,GAFgB,CAIhB;;AACAC,YAAAA,QAAQ,CAACC,KAAT,GAAiBV,YAAY,CAACK,EAAE,CAACM,IAAH,CAAQD,KAAT,CAA7B,CALgB,CAOhB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACME,YAAAA,QAxDU,GAwDC,aAxDD;AAyDVC,YAAAA,IAzDU,GAyDH,OAzDG;;AAAA,iBA0DZD,QA1DY;AAAA;AAAA;AAAA;;AA2DdL,YAAAA,IAAI;AA3DU;AAAA,mBA4DaX,KAAK,CAACkB,QAAN,CAAe,2BAAf,EAA4CD,IAA5C,CA5Db;;AAAA;AA4DRE,YAAAA,YA5DQ;AA6Dd;AACApB,YAAAA,MAAM,CAACqB,SAAP,CAAiBD,YAAjB;;AA9Dc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;AAkEApB,MAAM,CAACsB,SAAP,CAAiB,YAAM;AACrB;AACAnB,EAAAA,SAAS,CAACoB,IAAV;AACD,CAHD","sourcesContent":["import router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css' // progress bar style\nimport { getToken } from '@/utils/auth' // get token from cookie\nimport getPageTitle from '@/utils/get-page-title'\n\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\n\nconst whiteList = ['/login', '/auth-redirect'] // no redirect whitelist\n\nrouter.beforeEach(async (to, from, next) => {\n  // start progress bar\n  NProgress.start()\n\n  // set page title\n  document.title = getPageTitle(to.meta.title)\n\n  // determine whether the user has logged in\n  // const hasToken = getToken()\n\n  // if (hasToken) {\n  //   if (to.path === '/login') {\n  //     // if is logged in, redirect to the home page\n  //     next({ path: '/' })\n  //     NProgress.done()\n  //   } else {\n  //     // determine whether the user has obtained his permission roles through getInfo\n  //     const hasRoles = store.getters.roles && store.getters.roles.length > 0\n  //     if (hasRoles) {\n  //       next()\n  //     } else {\n  //       try {\n  //         // get user info\n  //         // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']\n  //         const { roles } = await store.dispatch('user/getInfo')\n\n  //         // generate accessible routes map based on roles\n  //         const accessRoutes = await store.dispatch('permission/generateRoutes', roles)\n\n  //         // dynamically add accessible routes\n  //         router.addRoutes(accessRoutes)\n\n  //         // hack method to ensure that addRoutes is complete\n  //         // set the replace: true, so the navigation will not leave a history record\n  //         next({ ...to, replace: true })\n  //       } catch (error) {\n  //         // remove token and go to login page to re-login\n  //         await store.dispatch('user/resetToken')\n  //         Message.error(error || 'Has Error')\n  //         next(`/login?redirect=${to.path}`)\n  //         NProgress.done()\n  //       }\n  //     }\n  //   }\n  // } else {\n  //   /* has no token*/\n\n  //   if (whiteList.indexOf(to.path) !== -1) {\n  //     // in the free login whitelist, go directly\n  //     next()\n  //   } else {\n  //     // other pages that do not have permission to access are redirected to the login page.\n  //     next(`/login?redirect=${to.path}`)\n  //     NProgress.done()\n  //   }\n  // }\n  const hasToken = 'admin-token'\n  const role = 'admin'\n  if (hasToken) {\n    next()\n    const accessRoutes = await store.dispatch('permission/generateRoutes', role)\n    // dynamically add accessible routes\n    router.addRoutes(accessRoutes)\n  }\n})\n\nrouter.afterEach(() => {\n  // finish progress bar\n  NProgress.done()\n})\n"]}]}